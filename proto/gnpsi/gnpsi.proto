//
// Copyright 2021 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "proto/gnpsi/histogram.proto";

option go_package = "github.com/openconfig/gnpsi/proto/gnpsi";

// Package gNPSI defines a service specification for the gRPC Network Packet
// Sampling Interface. This interface is defined to be a standard interface via
// which a telemetry system ("client") can subscribe to sampling updates from a
// device
// ("target").
//
package gnpsi;

service gNPSI {
  // gNPSI subscription allows client to subscribe to SFlow/NetFlow/IPFIX
  // updates from the device.  Past updates, i.e., updates before the
  // subscription is received, will not be presented to the subscribing client.
  rpc Subscribe(Request) returns (stream Sample);
}

message SFlowMetadata {
  enum Version {
    UNSPECIFIED = 0;
    V2 = 1;
    V5 = 2;
  }
  Version version = 1;
}

message NetFlowMetadata {
  enum Version {
    UNSPECIFIED = 0;
    V1 = 1;
    V5 = 2;
    V7 = 3;
    V9 = 4;
  }
  Version version = 1;
}

message IPFIXMetadata {
  enum Version {
    UNSPECIFIED = 0;
    V10 = 1;
  }
  Version version = 1;
}

message Request {}

message CongestionTelemetry {
  // Continuous histogram representing port utilization for the sample egress
  // port across multiple buckets. Each bucket represents the amount of time the
  // sample egress port spent in a given utilisation range. The range
  // is specified using bucket.inclusive_start and bucket.exclusive_end values.
  // The amount of time spent in a given range is specified using
  // bucket.num_entries.
  Histogram egress_port_utilization_histogram = 1;

  // Timestamp when the congestion telemetry was collected.
  google.protobuf.Timestamp timestamp = 101;

  // Ingress port and sample sequence number are used to determine which sample
  // the congestion telemetry is associated with. (Sample
  // sequence number + ingress port) combination can uniquely identify a sample
  // packet. We need this as a validation to make sure we look at the
  // right metadata associated with the samples.

  // Ingress port number the associated sample was received on.
  int32 ingress_port = 102;

  // Egress port number the associated sample was sent out of.
  int32 egress_port = 103;

  // Sequence number of the sample.
  int32 sample_sequence_number = 104;
}

// gNPSI sample that can contain SFlow/NetFlow/IPFIX data.
//
// When the sflow_metadata is set, the `packet` field within the sample contains
// an sFlow datagram.
// When the netflow_metadata is set, the `packet` field within the sample
// contains a NetFlow datagram.
// When the ipfix_metadata is set, the `packet` field within the sample contains
// an IPFIX message.
message Sample {
  // Payload of the sample.
  bytes packet = 1;

  // Last timestamp of sample payload (ns since epoch)
  int64 timestamp = 2;

  // Congestion telemetry for each sample in the packet.
  repeated CongestionTelemetry congestion_telemetry = 3;

  // Only one of these metadata will be populated to correspond to the sample
  // returned.
  //
  // The metadata fields applies to all messages on this stream, and would only
  // be present in the first message on the stream.
  SFlowMetadata sflow_metadata = 101;
  NetFlowMetadata netflow_metadata = 102;
  IPFIXMetadata ipfix_metadata = 103;
}
